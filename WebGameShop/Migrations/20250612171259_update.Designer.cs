// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WebGameShop.Data;

#nullable disable

namespace WebGameShop.Migrations
{
    [DbContext(typeof(WebGameShopDBContext))]
    [Migration("20250612171259_update")]
    partial class update
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.15")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("WebGameShop.Models.Contact", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("SentDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("ContactMessages");
                });

            modelBuilder.Entity("WebGameShop.Models.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("OrderPlaced")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("OrderTotal")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("WebGameShop.Models.OrderDetail", b =>
                {
                    b.Property<int>("OrderDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderDetailId"));

                    b.Property<int?>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("Orders")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("OrderDetailId");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrdersDetails");
                });

            modelBuilder.Entity("WebGameShop.Models.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Detail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsTrendingProduct")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18, 2)");

                    b.HasKey("Id");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Detail = "Black Myth Wukong là một game Triple A với đồ họa cực khủng. Có raysing với đồ họa đẹp nhất từ trước đến nay , nhưng từ đó cũng cần 1 cấu hình PC mạnh mẽ như chip mạnh Ram cao, và đặc biết là GPU: thấp nhất thì 2070supper cho tới 5 seri",
                            ImageUrl = "https://i.pinimg.com/736x/97/3e/16/973e16ab9a05c0d1c1c9c1788cca1e93.jpg",
                            IsTrendingProduct = false,
                            Name = "Black Myth Wukong",
                            Price = 55m
                        },
                        new
                        {
                            Id = 2,
                            Detail = "Apex legends là một game bắn súng góc nhìn thứ nhất , trò chơi fps này là người chơi sẽ chạy bo ",
                            ImageUrl = "https://i.pinimg.com/736x/84/eb/20/84eb2061bf0a96bec901c5c31f760891.jpg",
                            IsTrendingProduct = false,
                            Name = "Apex legends",
                            Price = 70m
                        },
                        new
                        {
                            Id = 3,
                            Detail = "Valorant là game bắn súng với góc nhìn thứ 1, 1 bên sẽ bảo vệ khu đặt C4 và 1 bên còn lại đi lừa và đặt c4",
                            ImageUrl = "https://i.pinimg.com/736x/39/dd/4d/39dd4da08ecccc0159d79598365e995e.jpg",
                            IsTrendingProduct = false,
                            Name = "Valorant",
                            Price = 25m
                        },
                        new
                        {
                            Id = 4,
                            Detail = "Chicken Invaders là trò chơi chiến thuật đi du hành các vì sao bắn các con gà",
                            ImageUrl = "https://i.pinimg.com/736x/e8/2e/b3/e82eb3a089c1b790aeb07ece0addba90.jpg",
                            IsTrendingProduct = false,
                            Name = "Chickend Invaders",
                            Price = 15m
                        },
                        new
                        {
                            Id = 5,
                            Detail = "3Q Củ hành là game moba chiến thuật giao tranh giữa 2 bên là Ngụy và Ngô...",
                            ImageUrl = "https://i.pinimg.com/736x/e4/f9/66/e4f966f2e7eeebceaf14f1f81f912621.jpg",
                            IsTrendingProduct = false,
                            Name = "3Q Củ Hành",
                            Price = 55m
                        },
                        new
                        {
                            Id = 6,
                            Detail = "Game DC spuer man đánh nhau với quái vật.",
                            ImageUrl = "https://i.pinimg.com/736x/6b/57/3a/6b573a7bd2abf31aa5544ef019869cb2.jpg",
                            IsTrendingProduct = false,
                            Name = "DC UNIVERSE",
                            Price = 95m
                        },
                        new
                        {
                            Id = 7,
                            Detail = "Halo là game hành động mặc lên bộ giáp chiến cực ngầu đi bắn quái vật.",
                            ImageUrl = "https://i.pinimg.com/736x/bb/5b/20/bb5b20c42ed71a4f3434b66374e6ecc2.jpg",
                            IsTrendingProduct = false,
                            Name = "Hallo",
                            Price = 105m
                        },
                        new
                        {
                            Id = 8,
                            Detail = "Chicken Invaders là trò chơi chiến thuật đi du hành các vì sao bắn các con gà",
                            ImageUrl = "https://i.pinimg.com/736x/c9/e8/e2/c9e8e2de1334ef26ab9f22bea8f7a853.jpg",
                            IsTrendingProduct = false,
                            Name = "God Of War",
                            Price = 600m
                        },
                        new
                        {
                            Id = 9,
                            Detail = "Liên Minh huyền thoại là game chia phe ra đánh nhau và đẩy nhà ... bên nào đẩy nhà xong trước bên đây thắng",
                            ImageUrl = "https://i.pinimg.com/736x/c8/3a/f2/c83af2fe3d2b7ed26d605224958d1f28.jpg",
                            IsTrendingProduct = false,
                            Name = "LOL",
                            Price = 900m
                        },
                        new
                        {
                            Id = 10,
                            Detail = "NARAKA BLADEPOINT: Đắm chìm vào những huyền thoại của Viễn Đông trong NARAKA: BLADEPOINT; hợp tác với bạn bè của bạn trong những trận chiến cận chiến nhịp độ nhanh để có trải nghiệm Battle Royale không giống bất kỳ trải nghiệm nào khác. Những anh hùng từ khắp nơi trên thế giới đã tụ họp trên Đảo Morus, nơi hai vị thần cổ đại đã va chạm nhau từ hàng triệu năm trước — tạo ra Mặt nạ bất tử: một hiện vật có sức mạnh huyền thoại. Bạn là một anh hùng như vậy, sẵn sàng đối mặt với nhiều người khác trên con đường giành lấy nó.\r\n",
                            ImageUrl = "https://i.pinimg.com/736x/d4/b7/93/d4b7932df8ddf3cb913e08e53177b107.jpg",
                            IsTrendingProduct = false,
                            Name = "NARAKA",
                            Price = 1000m
                        },
                        new
                        {
                            Id = 11,
                            Detail = "Cận cảnh Mecha | Lumina Đôi cánh rực rỡ sẽ xuất hiện trên bầu trời và đáp xuống chiến trường đang bên bờ vực sụp đổ, cứu vãn tình hình khỏi cái chết chắc chắn.",
                            ImageUrl = "https://i.pinimg.com/736x/87/31/b7/8731b76ef8f1ceb0fe99f54615294b15.jpg",
                            IsTrendingProduct = false,
                            Name = "Mechabreak",
                            Price = 1550m
                        },
                        new
                        {
                            Id = 12,
                            Detail = "Đánh giá PlayerUnknown’s Battlegrounds (dành cho PC), Tôi đã trải qua nỗi kinh hoàng thầm lặng trong trận đấu PlayerUnknown BattleGrounds (PUBG) đầu tiên của mình. Trận đấu thứ 2 cũng mang lại cảm giác tương tự. Độ vừa vặn 1/3 cao hơn nhiều so với những trận trước, vì tôi đã thận trọng lái xe đạp cho đến khi chỉ còn lại chưa đến 10 game thủ. Lần tiếp theo, Đọc thêm https://smartgamer.website/playerunknowns-battlegrounds-for-pc-review",
                            ImageUrl = "https://i.pinimg.com/736x/9e/01/b5/9e01b5a0679af689d02213a5c95a5737.jpg",
                            IsTrendingProduct = false,
                            Name = "Pubg",
                            Price = 2200m
                        });
                });

            modelBuilder.Entity("WebGameShop.Models.ShoppingcartItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Qty")
                        .HasColumnType("int");

                    b.Property<string>("ShoppingCartId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("ShoppingCartItems");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WebGameShop.Models.OrderDetail", b =>
                {
                    b.HasOne("WebGameShop.Models.Order", "Order")
                        .WithMany("OrderDetails")
                        .HasForeignKey("OrderId");

                    b.HasOne("WebGameShop.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("WebGameShop.Models.ShoppingcartItem", b =>
                {
                    b.HasOne("WebGameShop.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("WebGameShop.Models.Order", b =>
                {
                    b.Navigation("OrderDetails");
                });
#pragma warning restore 612, 618
        }
    }
}
